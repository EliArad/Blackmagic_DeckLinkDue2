/* -LICENSE-START-
** Copyright (c) 2019 Blackmagic Design
**
** Permission is hereby granted, free of charge, to any person or organization
** obtaining a copy of the software and accompanying documentation covered by
** this license (the "Software") to use, reproduce, display, distribute,
** execute, and transmit the Software, and to prepare derivative works of the
** Software, and to permit third-parties to whom the Software is furnished to
** do so, all subject to the following:
** 
** The copyright notices in the Software and this entire statement, including
** the above license grant, this restriction and the following disclaimer,
** must be included in all copies of the Software, in whole or in part, and
** all derivative works of the Software, unless such copies or derivative
** works are solely in the form of machine-executable object code generated by
** a source language processor.
** 
** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
** DEALINGS IN THE SOFTWARE.
** -LICENSE-END-
*/

#pragma once

#include <atomic>
#include <stdint.h>
#include "D3D9.h"
#include "DeckLinkAPI_h.h"
#include "Common.h"
#include "DSGraphUtils.h"

class PreviewWindowDX9 : public IDeckLinkScreenPreviewCallback
{
public:
	PreviewWindowDX9();
	virtual ~PreviewWindowDX9() {}

	bool						init();
	void						Render(void);

	// IUnknown only needs a dummy implementation
	virtual HRESULT __stdcall	QueryInterface(REFIID iid, LPVOID *ppv) override;
	virtual ULONG	__stdcall	AddRef() override;
	virtual ULONG	__stdcall	Release() override;

	// IDeckLinkScreenPreviewCallback
	virtual HRESULT __stdcall	DrawFrame(IDeckLinkVideoFrame* theFrame) override;

	FrameCallback pFrameCallback;


	void SetWindowSize(int x, int y, int width, int height);
	void SetFrameCallback(FrameCallback p);
	bool SetVideoHandle(HWND p);

	void SetPreviewVideo(bool preview);
	void SetSourceFilter(CComPtr<ILiveSource> pFrameLiveSourceInterface);


private:
	std::atomic<uint32_t>						m_refCount;

	CComPtr<IDeckLinkDX9ScreenPreviewHelper>	m_deckLinkScreenPreviewHelper;
	//CStatic*									m_previewBox;
	CComPtr<IDirect3D9>							m_dx3D;
	CComPtr<IDirect3DDevice9>					m_dx3DDevice;

	bool										initDirectX(HWND hWnd);
	HDC											pWindowHDC;
	bool										m_init;


	IDeckLinkVideoFrame*		receivedVideoFrame;
	IDeckLinkVideoConversion*	deckLinkFrameConverter;
	IDeckLinkVideoFrame*		bgra32Frame;


	HRESULT GetDeckLinkVideoConversion(IDeckLinkVideoConversion **deckLinkVideoConversion);
	CComPtr<ILiveSource> pFrameLiveSourceInterface;

	bool m_previewVideo;
	bool m_useSourceFilter;
};

