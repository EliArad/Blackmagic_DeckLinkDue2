/* -LICENSE-START-
** Copyright (c) 2019 Blackmagic Design
**
** Permission is hereby granted, free of charge, to any person or organization
** obtaining a copy of the software and accompanying documentation covered by
** this license (the "Software") to use, reproduce, display, distribute,
** execute, and transmit the Software, and to prepare derivative works of the
** Software, and to permit third-parties to whom the Software is furnished to
** do so, all subject to the following:
**
** The copyright notices in the Software and this entire statement, including
** the above license grant, this restriction and the following disclaimer,
** must be included in all copies of the Software, in whole or in part, and
** all derivative works of the Software, unless such copies or derivative
** works are solely in the form of machine-executable object code generated by
** a source language processor.
**
** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
** DEALINGS IN THE SOFTWARE.
** -LICENSE-END-
*/

#include "stdafx.h"
#include <chrono>
#include "Camerauicontrol.h"
#include "mfapi.h"
#include "mferror.h"
#include "mfidl.h"
#include "propvarutil.h"
#include "SourceReader.h"

DEFINE_GUID(CLSID_VideoProcessorMFT, 0x88753b26, 0x5b24, 0x49bd, 0xb2, 0xe7, 0xc, 0x44, 0x5c, 0x78, 0xc9, 0x82);

static const int kSampleQueueWaterlevel = 3;

// Audio Configuration - fix to 48kHz PCM, 2-channel, 16-bit samples
static const uint32_t			kAudioChannelCount	= 2;
static const BMDAudioSampleType	kAudioBitsPerSample	= bmdAudioSampleType16bitInteger;

// Video pixel format - fix to v210
static const std::pair<GUID, BMDPixelFormat> kVideoPixelFormat = std::make_pair(MFVideoFormat_RGB32, bmdFormat8BitBGRA);

static const std::chrono::seconds kSourceReaderTimeout{ 3 };


SourceReader::SourceReader() : 
	m_refCount(1),
	m_initialized(false),
	m_waitingOnVideoSample(false),
	m_waitingOnAudioSample(false),
	m_frameWidth(0),
	m_frameHeight(0),
	m_minimumStride(0),
	m_frameRateNumerator(30),
	m_frameRateDenominator(1),
	m_frameFieldDominance(MFVideoInterlace_Unknown),
	m_audioStreamIndex(-1),
	m_videoStreamIndex(-1)
{
}

SourceReader::~SourceReader()
{
}

HRESULT SourceReader::QueryInterface(REFIID riid, void **ppv)
{
	HRESULT result = E_NOINTERFACE;

	if (ppv == nullptr)
		return E_INVALIDARG;

	// Initialise the return result
	*ppv = nullptr;

	// Obtain the IUnknown interface and compare it the provided REFIID
	if (riid == IID_IUnknown)
	{
		*ppv = this;
		AddRef();
		result = S_OK;
	}
	else if (riid == IID_IMFSourceReaderCallback)
	{
		*ppv = (IMFSourceReaderCallback*)this;
		AddRef();
		result = S_OK;
	}

	return result;
}

ULONG SourceReader::AddRef(void)
{
	return ++m_refCount;
}

ULONG SourceReader::Release(void)
{
	ULONG newRefValue = --m_refCount;
	if (newRefValue == 0)
		delete this;

	return newRefValue;
}

HRESULT SourceReader::Initialize(CString filename)
{
	HRESULT					hr			= S_OK;
	CComPtr<IMFAttributes>	attributes	= nullptr;

	// If already initialized, release source reader.
	Uninitialize();

	hr = MFCreateAttributes(&attributes, 1);
	if (hr != S_OK)
		goto bail;

	hr = attributes->SetUnknown(MF_SOURCE_READER_ASYNC_CALLBACK, this);
	if (hr != S_OK)
		goto bail;

	// Enable Video processing so we can read in RGB32 format
#if (WINVER >= _WIN32_WINNT_WIN8) 
	hr = attributes->SetUINT32(MF_READWRITE_ENABLE_HARDWARE_TRANSFORMS, TRUE);
	if (hr != S_OK)
		goto bail;

	hr = attributes->SetUINT32(MF_SOURCE_READER_ENABLE_ADVANCED_VIDEO_PROCESSING, TRUE);
	if (hr != S_OK)
		goto bail;
#else
	hr = attributes->SetUINT32(MF_SOURCE_READER_ENABLE_VIDEO_PROCESSING, TRUE);
	if (hr != S_OK)
		goto bail;
#endif

	hr = MFCreateSourceReaderFromURL(CT2CW(filename), attributes, (IMFSourceReader**)&m_sourceReader);
	if (hr != S_OK)
		goto bail;

	for (int idx = 0; hr == S_OK; idx++)
	{
		CComPtr<IMFMediaType> nativeType = nullptr;
		GUID majorType;

		hr = m_sourceReader->GetNativeMediaType(idx, 0, &nativeType);
		if (hr == S_OK)
		{
			// Find the native major type.
			hr = nativeType->GetMajorType(&majorType);
			if (hr != S_OK)
				goto bail;

			if ((majorType == MFMediaType_Audio) && (m_audioStreamIndex < 0))
			{
				m_audioStreamIndex = idx;
				hr = ConfigureAudioDecoder();
				if (hr != S_OK)
					goto bail;
			}
			else if ((majorType == MFMediaType_Video) && (m_videoStreamIndex < 0))
			{
				m_videoStreamIndex = idx;
				hr = ConfigureVideoDecoder();
				if (hr != S_OK)
					goto bail;
			}
		}
	}

	if ((hr != MF_E_INVALIDSTREAMNUMBER) || (m_audioStreamIndex < 0) || (m_videoStreamIndex < 0))
		goto bail;

	// Read initial video and audio samples
	hr = RequestAudioSample();
	if (hr != S_OK)
		goto bail;

	hr = RequestVideoSample();
	if (hr != S_OK)
		goto bail;

	m_initialized = true;

	return S_OK;

bail:
	m_sourceReader.Release();

	m_initialized = false;

	return hr;
}

void SourceReader::Uninitialize()
{
	if (m_initialized)
	{
		// Should release IMFSourceReader to release SourceReader references
		m_sourceReader.Release();
		m_audioStreamIndex = -1;
		m_videoStreamIndex = -1;

		m_initialized = false;
	}
}

HRESULT SourceReader::ConfigureVideoDecoder()
{
	CComPtr<IMFMediaType>	outputType	= nullptr;
	HRESULT					hr			= S_OK;

	// Define the output type.
	hr = MFCreateMediaType(&outputType);
	if (hr != S_OK)
		goto bail;

	hr = outputType->SetGUID(MF_MT_MAJOR_TYPE, MFMediaType_Video);
	if (hr != S_OK)
		goto bail;

	hr = outputType->SetGUID(MF_MT_SUBTYPE, MFVideoFormat_RGB32);
	if (hr != S_OK)
		goto bail;

	// Set the uncompressed format.
	hr = m_sourceReader->SetCurrentMediaType(m_videoStreamIndex, nullptr, outputType);
	if (hr != S_OK)
		goto bail;

	outputType.Release();
	
	// Get full output descriptor
	hr = m_sourceReader->GetCurrentMediaType(m_videoStreamIndex, &outputType);
	if (hr != S_OK)
		goto bail;

	hr = MFGetAttributeSize(outputType, MF_MT_FRAME_SIZE, &m_frameWidth, &m_frameHeight);
	if (hr != S_OK)
		goto bail;

	hr = MFGetAttributeRatio(outputType, MF_MT_FRAME_RATE, &m_frameRateNumerator, &m_frameRateDenominator);
	if (hr != S_OK)
		goto bail;

	hr = outputType->GetUINT32(MF_MT_INTERLACE_MODE, &m_frameFieldDominance);
	if (hr != S_OK)
		goto bail;

	hr = outputType->GetUINT32(MF_MT_DEFAULT_STRIDE, (UINT32*)&m_minimumStride);
	if (hr != S_OK)
	{
		// Default stride is not stored, use MFGetStrideForBitmapInfoHeader to calculate stride
		hr = MFGetStrideForBitmapInfoHeader(kVideoPixelFormat.first.Data1, m_frameWidth, &m_minimumStride);
		if (hr != S_OK)
			// Still no luck, use the DeckLink calculation for frame width
			m_minimumStride = (m_frameWidth * 32) / 8;

		hr = outputType->SetUINT32(MF_MT_DEFAULT_STRIDE, m_minimumStride);
		if (hr != S_OK)
			goto bail;
	}

bail:
	return hr;
}

HRESULT SourceReader::ConfigureAudioDecoder()
{
	CComPtr<IMFMediaType>	outputType	= nullptr;
	HRESULT					hr			= S_OK;

	// Calculate derived values.
	uint32_t blockAlign = kAudioChannelCount * (kAudioBitsPerSample / 8);
	uint32_t bytesPerSecond = blockAlign * bmdAudioSampleRate48kHz;

	// Define the output type.
	hr = MFCreateMediaType(&outputType);
	if (hr != S_OK)
		goto bail;

	hr = outputType->SetGUID(MF_MT_MAJOR_TYPE, MFMediaType_Audio);
	if (hr != S_OK)
		goto bail;

	// Output PCM
	hr = outputType->SetGUID(MF_MT_SUBTYPE, MFAudioFormat_PCM);
	if (hr != S_OK)
		goto bail;
	
	hr = outputType->SetUINT32(MF_MT_AUDIO_NUM_CHANNELS, kAudioChannelCount);
	if (hr != S_OK)
		goto bail;

	hr = outputType->SetUINT32(MF_MT_AUDIO_SAMPLES_PER_SECOND, bmdAudioSampleRate48kHz);
	if (hr != S_OK)
		goto bail;

	hr = outputType->SetUINT32(MF_MT_AUDIO_BLOCK_ALIGNMENT, blockAlign);
	if (hr != S_OK)
		goto bail;

	hr = outputType->SetUINT32(MF_MT_AUDIO_AVG_BYTES_PER_SECOND, bytesPerSecond);
	if (hr != S_OK)
		goto bail;

	hr = outputType->SetUINT32(MF_MT_AUDIO_BITS_PER_SAMPLE, kAudioBitsPerSample);
	if (hr != S_OK)
		goto bail;

	hr = outputType->SetUINT32(MF_MT_ALL_SAMPLES_INDEPENDENT, TRUE);
	if (hr != S_OK)
		goto bail;

	// Set the uncompressed format.
	hr = m_sourceReader->SetCurrentMediaType(m_audioStreamIndex, NULL, outputType);

bail:
	return hr;
}

BMDAudioSampleType SourceReader::GetAudioBitsPerSample() const
{
	return kAudioBitsPerSample;
}

uint32_t SourceReader::GetAudioChannelCount() const
{
	return kAudioChannelCount;
}

BMDPixelFormat SourceReader::GetVideoPixelFormat() const
{
	return kVideoPixelFormat.second;
}

HRESULT SourceReader::GetFileDuration(int64_t* duration)
{
	PROPVARIANT var;
	HRESULT hr = m_sourceReader->GetPresentationAttribute(MF_SOURCE_READER_MEDIASOURCE, MF_PD_DURATION, &var);
	if (hr == S_OK)
	{
		hr = PropVariantToInt64(var, duration);
		PropVariantClear(&var);
	}
	return hr;
}

HRESULT SourceReader::SetPosition(const int64_t& position)
{
	PROPVARIANT var;
	HRESULT hr = InitPropVariantFromInt64(position, &var);
	if (hr != S_OK)
		return hr;

	hr = m_sourceReader->SetCurrentPosition(GUID_NULL, var);
	PropVariantClear(&var);
	if (hr != S_OK)
		goto bail;

	// If we have previously reached end of stream, request new samples
	if (m_readAudioSample.endOfStream)
	{
		hr = RequestAudioSample();
		if (hr != S_OK)
			goto bail;
	}

	if (m_readVideoSample.endOfStream)
	{
		hr = RequestVideoSample();
		if (hr != S_OK)
			goto bail;
	}

bail:
	return hr;
}

bool SourceReader::SourceCanSeek(void)
{
	bool		canSeek	= false;
	ULONG		flags	= 0;
	HRESULT		hr		= S_OK;
	PROPVARIANT var;

	PropVariantInit(&var);

	hr = m_sourceReader->GetPresentationAttribute(MF_SOURCE_READER_MEDIASOURCE, MF_SOURCE_READER_MEDIASOURCE_CHARACTERISTICS, &var);
	if (hr != S_OK)
		goto bail;

	hr = PropVariantToUInt32(var, &flags);
	if (hr != S_OK)
		goto bail;

	canSeek = ((flags & MFMEDIASOURCE_CAN_SEEK) == MFMEDIASOURCE_CAN_SEEK);

bail:
	PropVariantClear(&var);

	return canSeek;
}

HRESULT SourceReader::OnReadSample(HRESULT hrStatus, DWORD dwStreamIndex, DWORD dwStreamFlags, LONGLONG llTimestamp, IMFSample* pSample)
{
	if (hrStatus == S_OK)
	{
		std::lock_guard<std::mutex> lock(m_sourceReaderMutex);
		{
			if (dwStreamIndex == m_audioStreamIndex)
			{
				m_readAudioSample = { pSample, llTimestamp, (dwStreamFlags & MF_SOURCE_READERF_ENDOFSTREAM) != 0 };
				m_waitingOnAudioSample = false;
			}
			else if (dwStreamIndex == m_videoStreamIndex)
			{
				m_readVideoSample = { pSample, llTimestamp, (dwStreamFlags & MF_SOURCE_READERF_ENDOFSTREAM) != 0 };
				m_waitingOnVideoSample = false;
			}
		}
		m_sourceReaderCondition.notify_all();
	}

	return S_OK;
}

HRESULT SourceReader::OnFlush(DWORD dwStreamIndex)
{
	return S_OK;
}

HRESULT SourceReader::OnEvent(DWORD dwStreamIndex, IMFMediaEvent * pEvent)
{
	return S_OK;
}

bool SourceReader::ReadAudioPacket(ReadAudioPacketCallback callback)
{
	CComPtr<PlaybackAudioPacket> audioPacket;
	bool						 endOfStream = false;

	{
		std::unique_lock<std::mutex> lock(m_sourceReaderMutex);
		if (m_sourceReaderCondition.wait_for(lock, kSourceReaderTimeout, [&] { return !m_waitingOnAudioSample; }))
		{
			CComPtr<IMFSample> readSample;
			if (m_readAudioSample.sample && (m_readAudioSample.sample.CopyTo(&readSample) == S_OK))
				audioPacket.Attach(new PlaybackAudioPacket(readSample, m_readAudioSample.timestamp, kAudioBitsPerSample, kAudioChannelCount));
			endOfStream = m_readAudioSample.endOfStream;

			// Release reference for read sample ready for next read request
			m_readAudioSample.sample.Release();
		}
		else
		{
			// Timeout waiting for sample
			return false;
		}
	}
	if ((callback != nullptr) && (!callback(audioPacket, endOfStream)))
		return false;

	// Request next video sample
	if (!endOfStream)
		return (RequestAudioSample() == S_OK);

	return true;
}

bool SourceReader::ReadVideoFrame(ReadVideoFrameCallback callback)
{
	CComPtr<PlaybackVideoFrame>	videoFrame;
	bool						endOfStream = false;

	{
		std::unique_lock<std::mutex> lock(m_sourceReaderMutex);
		if (m_sourceReaderCondition.wait_for(lock, kSourceReaderTimeout, [&] { return !m_waitingOnVideoSample; }))
		{
			CComPtr<IMFSample> readSample;
			if (m_readVideoSample.sample && (m_readVideoSample.sample.CopyTo(&readSample) == S_OK))
				videoFrame.Attach(new PlaybackVideoFrame(readSample, m_readVideoSample.timestamp, m_frameWidth, m_frameHeight, m_minimumStride, kVideoPixelFormat.second));
			endOfStream = m_readVideoSample.endOfStream;

			// Release reference for read sample
			m_readVideoSample.sample.Release();
		}
		else
		{
			// Timeout waiting for sample
			return false;
		}
	}

	if ((callback != nullptr) && !callback(videoFrame, endOfStream))
		return false;

	// Request next video sample
	if (!endOfStream)
		return (RequestVideoSample() == S_OK);
	
	return true;
}

HRESULT SourceReader::RequestVideoSample(void)
{
	std::lock_guard<std::mutex> lock(m_sourceReaderMutex);
	m_waitingOnVideoSample = true;
	return m_sourceReader->ReadSample(m_videoStreamIndex, 0, nullptr, nullptr, nullptr, nullptr);
}

HRESULT SourceReader::RequestAudioSample(void)
{
	std::lock_guard<std::mutex> lock(m_sourceReaderMutex);
	m_waitingOnAudioSample = true;
	return m_sourceReader->ReadSample(m_audioStreamIndex, 0, nullptr, nullptr, nullptr, nullptr);
}

HRESULT SourceReader::EnableAudioStream(BOOL enable)
{
	return m_sourceReader->SetStreamSelection(m_audioStreamIndex, enable);
}
