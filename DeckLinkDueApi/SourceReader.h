/* -LICENSE-START-
** Copyright (c) 2019 Blackmagic Design
**
** Permission is hereby granted, free of charge, to any person or organization
** obtaining a copy of the software and accompanying documentation covered by
** this license (the "Software") to use, reproduce, display, distribute,
** execute, and transmit the Software, and to prepare derivative works of the
** Software, and to permit third-parties to whom the Software is furnished to
** do so, all subject to the following:
**
** The copyright notices in the Software and this entire statement, including
** the above license grant, this restriction and the following disclaimer,
** must be included in all copies of the Software, in whole or in part, and
** all derivative works of the Software, unless such copies or derivative
** works are solely in the form of machine-executable object code generated by
** a source language processor.
**
** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
** DEALINGS IN THE SOFTWARE.
** -LICENSE-END-
*/

#pragma once

#include <atlbase.h>
#include <atomic>
#include <condition_variable>
#include <mutex>
#include <queue>
#include "mfidl.h"
#include "mfreadwrite.h"

#include "PlaybackAudioPacket.h"
#include "PlaybackVideoFrame.h"
#include "DeckLinkAPI_h.h"

static const BMDTimeScale kMFTimescale = 10 * 1000 * 1000;

struct ReadSample
{
	CComPtr<IMFSample>	sample;
	LONGLONG			timestamp;
	bool				endOfStream;
};

// Forward declarations
class PlaybackAudioPacket;
class PlaybackVideoFrame;

class SourceReader : public IMFSourceReaderCallback
{
	using ReadVideoFrameCallback = std::function<bool(CComPtr<PlaybackVideoFrame>&, bool)>;
	using ReadAudioPacketCallback = std::function<bool(CComPtr<PlaybackAudioPacket>&, bool)>;

public:
	SourceReader();
	virtual ~SourceReader();
	
	// IMFSourceReaderCallback interface
	virtual HRESULT	__stdcall	OnReadSample(HRESULT hrStatus, DWORD dwStreamIndex, DWORD dwStreamFlags, LONGLONG llTimestamp, IMFSample* pSample) override;
	virtual HRESULT	__stdcall	OnFlush(DWORD dwStreamIndex) override;
	virtual HRESULT	__stdcall	OnEvent(DWORD dwStreamIndex, IMFMediaEvent* pEvent) override;

	// IUnknown interface
	virtual HRESULT	__stdcall	QueryInterface(REFIID riid, void** ppv) override;
	virtual ULONG	__stdcall	AddRef(void) override;
	virtual ULONG	__stdcall	Release(void) override;

	// Other methods
	HRESULT						Initialize(CString filename);
	void						Uninitialize(void);
	bool						IsInitialized(void) const { return m_initialized; }

	HRESULT						ConfigureVideoDecoder(void);
	HRESULT						ConfigureAudioDecoder(void);

	uint32_t					GetVideoFrameWidth(void) const { return m_frameWidth; }
	uint32_t					GetVideoFrameHeight(void) const { return m_frameHeight; }
	float						GetVideoFrameRate(void) const { return (float)m_frameRateNumerator / m_frameRateDenominator; }
	BMDAudioSampleType			GetAudioBitsPerSample(void) const;
	uint32_t					GetAudioChannelCount(void) const;
	BMDPixelFormat				GetVideoPixelFormat(void) const;

	HRESULT						RequestVideoSample(void);
	HRESULT						RequestAudioSample(void);
		
	HRESULT						GetFileDuration(int64_t* duration);
	HRESULT						SetPosition(const int64_t& position);
	bool						SourceCanSeek(void);

	HRESULT						EnableAudioStream(BOOL enable);

	bool						ReadAudioPacket(ReadAudioPacketCallback callback);
	bool						ReadVideoFrame(ReadVideoFrameCallback callback);

private:
	std::atomic<ULONG>			m_refCount;
	bool						m_initialized;

	std::condition_variable		m_sourceReaderCondition;
	std::mutex					m_sourceReaderMutex;
	bool						m_waitingOnVideoSample;
	bool						m_waitingOnAudioSample;

	ReadSample					m_readVideoSample;
	ReadSample					m_readAudioSample;

	CComPtr<IMFSourceReader>	m_sourceReader;
	int							m_audioStreamIndex;
	int							m_videoStreamIndex;

	uint32_t					m_frameWidth;
	uint32_t					m_frameHeight;
	long						m_minimumStride;
	uint32_t					m_frameRateNumerator;
	uint32_t					m_frameRateDenominator;
	uint32_t					m_frameFieldDominance;
};
