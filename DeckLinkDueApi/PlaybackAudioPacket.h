/* -LICENSE-START-
** Copyright (c) 2019 Blackmagic Design
**
** Permission is hereby granted, free of charge, to any person or organization
** obtaining a copy of the software and accompanying documentation covered by
** this license (the "Software") to use, reproduce, display, distribute,
** execute, and transmit the Software, and to prepare derivative works of the
** Software, and to permit third-parties to whom the Software is furnished to
** do so, all subject to the following:
**
** The copyright notices in the Software and this entire statement, including
** the above license grant, this restriction and the following disclaimer,
** must be included in all copies of the Software, in whole or in part, and
** all derivative works of the Software, unless such copies or derivative
** works are solely in the form of machine-executable object code generated by
** a source language processor.
**
** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
** DEALINGS IN THE SOFTWARE.
** -LICENSE-END-
*/

#pragma once

#include <atomic>
#include "mfidl.h"
#include "mfreadwrite.h"
#include "SourceReader.h"
#include "DeckLinkAPI_h.h"

class PlaybackAudioPacket : public IUnknown
{
public:
	PlaybackAudioPacket(CComPtr<IMFSample> readSample, int64_t streamTimestamp, BMDAudioSampleType audioSampleType, uint32_t audioChannelCount);
	virtual ~PlaybackAudioPacket();

	HRESULT						GetBytes(void **buffer);
	BMDTimeValue				GetStreamTime(BMDTimeScale timeScale);
	uint32_t					GetSampleCount(void) const { return m_audioSampleCount;	}

	// IUnknown interface
	virtual HRESULT	__stdcall	QueryInterface(REFIID riid, void** ppv) override;
	virtual ULONG	__stdcall	AddRef(void) override;
	virtual ULONG	__stdcall	Release(void) override;

private:
	std::atomic<ULONG>		m_refCount;

	int64_t					m_timestamp;
	uint32_t				m_audioSampleCount;

	BYTE*					m_lockedBuffer;
	bool					m_bufferIsLocked;
	CComPtr<IMFMediaBuffer>	m_readBuffer;
};
